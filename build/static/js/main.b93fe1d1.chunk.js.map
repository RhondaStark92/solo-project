{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/listReducer.js","redux/reducers/storeReducer.js","redux/reducers/storeCategoryReducer.js","redux/reducers/categoryReducer.js","redux/reducers/itemReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/listSaga.js","redux/sagas/storeSaga.js","redux/sagas/storeCategorySaga.js","redux/sagas/categorySaga.js","redux/sagas/itemSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AboutPage/AboutPage.js","components/InfoPage/InfoPage.js","components/ShoppingList/ShoppingListItem.js","components/ShoppingList/StoreSelector.js","components/ShoppingList/ClearButton.js","components/ShoppingList/ShoppingList.js","components/CreateListPage/ItemForm.js","components/CreateListPage/ItemForCategory.js","components/CreateListPage/ItemListForCategory.js","components/CreateListPage/CategoryForm.js","components/CreateListPage/CategoryList.js","components/CreateListPage/CreateListPage.js","components/StoreAdminPage/StoreAdminForm.js","components/StoreAdminPage/StoreCategoryList.js","components/StoreAdminPage/StoreCategoryOrder.js","components/StoreAdminPage/StoreList.js","components/StoreAdminPage/StoreAdminPage.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","listReducer","storeReducer","console","log","StoreCategoryReducer","arrayMove","oldIndex","newIndex","filter","cat","store_id","CategoryReducer","itemReducer","rootReducer","errors","user","list","store","storeCategory","category","item","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registrationSaga","registrationSaga_marked","registrationSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked2","fetchList","clearList","foundItem","updateQuantity","deleteListItem","deleteItemFromList","addItemToList","listSaga","params","id","listSaga_marked","call","delete","listSaga_marked2","found","listSaga_marked3","_context4","_marked4","_context5","_marked5","_context6","_marked6","_context7","_marked7","_context8","_marked8","fetchStores","addStore","deleteStore","storeSaga","storeSaga_marked","storeSaga_marked2","storeSaga_marked3","storeSaga_marked4","fetchStoreCategory","updateCategoryOrder","storeCategorySaga_marked","from","to","storeId","old","new","storeCategorySaga_marked2","storeCategorySaga_marked3","fetchCategory","addCategory","deleteCategory","updateCategory","categorySaga","categorySaga_marked","categorySaga_marked2","categorySaga_marked3","categorySaga_marked4","categorySaga_marked5","addItem","updateItem","fetchItems","fetchItemsForList","deleteItem","itemSaga","itemSaga_marked","itemSaga_marked2","itemSaga_marked3","itemSaga_marked4","itemSaga_marked5","itemSaga_marked6","rootSaga","all","storeCategorySaga","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","Fragment","components_LogOutButton_LogOutButton","Footer","Wrapper","styled","section","_templateObject","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","Object","defineProperty","target","value","_this2","role","onSubmit","Typography_default","variant","TextField_default","name","placeholder","margin","onChange","Button_default","color","Component","RegisterPage_templateObject","RegisterPage","RegisterPage_Wrapper","ComponentToShow","ComponentToProtect","component","otherProps","objectWithoutProperties","Route","assign","AboutPage_templateObject","AboutPage","AboutPage_Wrapper","List_default","ListItem_default","key","divider","dense","ListItemText_default","InfoPage","ShoppingListItem","handleToggle","itemText","concat","quantity","style","textDecoration","isNull","brand_name","Chip_default","label","button","ListItemSecondaryAction_default","IconButton_default","handleRemoveClick","aria-label","Cancel_default","Checkbox_default","checked","tabIndex","disableRipple","StoreSelector","map","Store","index","MenuItem_default","location","FormControl_default","fullWidth","Select_default","handleChange","renderStoreOptions","ClearListButton","open","handleClickOpen","handleCloseClear","handleClearList","handleClose","Fab_default","fontSize","Clear_default","Dialog_default","onClose","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","autoFocus","React","ShoppingList_templateObject","ShoppingList","getListForStore","ShoppingList_Wrapper","ShoppingList_StoreSelector","ShoppingList_ShoppingListItem","ClearButton","emptyListItem","category_id","person_id","ItemForm","newItem","_objectSpread2","objectSpread","validItemData","alert","addNewItem","item_id","item_name","react","Tooltip_default","title","placement","AddCircle_default","Edit_default","category_name","withStyles","theme","container","display","flexWrap","contentAlign","textField","marginLeft","marginRight","width","marginTop","menu","ItemForCategory","newListItem","handleItemClick","itemForCat","handleDeleteClick","confirmAlert","message","buttons","itemOnList","Badge_default","badgeContent","invisible","primary","secondary","CreateListPage_ItemForm","DeleteForever_default","list_id","RemoveCircle_default","spacing","unit","ExpansionPanelDetails","padding","ItemListForCategory","ExpansionPanelDetails_default","itemsForCategory","CreateListPage_ItemForCategory","emptyCategoryObject","CategoryForm","newCategory","validCategoryData","addNewCategory","CategoryList","expanded","panel","listForCat","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","CreateListPage_ItemListForCategory","ExpansionPanelActions_default","CreateListPage_CategoryForm","Delete_default","CreateListPage","CreateListPage_CategoryList","StoreAdminForm_templateObject","emptyStoreObject","h3","_templateObject2","StoreAdminForm","newStore","validStoreData","addNewStore","StoreAdminForm_Wrapper","SortableItem","SortableElement","_ref","SortableList","SortableContainer","_ref2","items","StoreCategoryList","onSortEnd","_ref3","helperClass","StoreCategoryOrder","fullScreen","Reorder_default","StoreAdminPage_StoreCategoryList","withMobileDialog","StoreList","StoreAdminPage_StoreCategoryOrder","StoreAdminPage","StoreAdminPage_StoreList","createMuiTheme","palette","main","light","contrastText","typography","useNextVariants","fontFamily","App","MuiThemeProvider_default","HashRouter","components_Nav_Nav","Switch","Redirect","exact","path","components_ProtectedRoute_ProtectedRoute","render","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.b93fe1d1.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const listReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_LIST':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// loginMode will be on the redux state at:\n// state.loginMode\nexport default listReducer;","const storeReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_STORES':\n      console.log('in set store reducer', action.payload);\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// loginMode will be on the redux state at:\n// state.loginMode\nexport default storeReducer;","import {arrayMove} from 'react-sortable-hoc';\n\nconst StoreCategoryReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_STORE_CATEGORY':\n      return action.payload;\n    case 'REORDER_LIST':\n      console.log('in reorder store category list', action.payload);\n      return arrayMove(state, action.payload.oldIndex, action.payload.newIndex);\n    case 'CATEGORIES_FOR_STORE':\n      console.log('in categories for store', action.payload);\n      const newArray = state.filter(cat => cat.store_id === action.payload);\n      return newArray;\n      // this.props.storeCategory.filter(cat => cat.store_id === this.props.storeIn.id);\n    default:\n      return state;\n  }\n};\n\n// loginMode will be on the redux state at:\n// state.loginMode\nexport default StoreCategoryReducer;","const CategoryReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_CATEGORY':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// loginMode will be on the redux state at:\n// state.loginMode\nexport default CategoryReducer;","const itemReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_ITEMS_FOR_LIST':\n      return action.payload;\n    case 'SET_ITEMS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// loginMode will be on the redux state at:\n// state.loginMode\nexport default itemReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport list from './listReducer';\nimport store from './storeReducer';\nimport storeCategory from './storeCategoryReducer';\nimport category from './categoryReducer';\nimport item from './itemReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  list, // contains array of items in the shopping_list table\n  store, // contains the array of stores in the store table\n  storeCategory, // contains the array of categories for the selected store and person\n  category, // contains the arry of categories\n  item, // contains the array of items\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n    \n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n\n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, call, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_LIST\" actions\nfunction* fetchList(action) {\n  console.log('in fetchSaga', action.payload);\n  \n  try {\n    // axios asynch call to retrieve the shopping list items from the database\n    const response = yield axios.get('api/list', {params: {id: action.payload}});\n    // Set the list in the redux store\n    yield put({ type: 'SET_LIST', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\n// worker SAGA: will be fired on 'CLEAR_LIST' actions\nfunction* clearList(action) {\n  try {\n    console.log('in clear list');\n    \n    //axios call to remove selected item from shopping list\n    yield call(axios.delete, '/api/list/clear');\n    // will need to make a call to update the list of items\n    yield put( { type: 'FETCH_LIST' , payload: action.payload.store_id} );\n  }\n  catch (error) {\n    console.log('error with delete request to /api/list');\n    \n  } \n}\n\n// worker Saga: will be fired on \"FOUND_ITEM\" actions\nfunction* foundItem(action) {\n  console.log('in foundItem', action.payload);\n  try {\n    // axios asynch call to update found flag on database\n    yield call(axios.put, '/api/list/found', \n              {id: action.payload.item.id, found: !action.payload.item.found});\n    // will need to make a call to update the list \n    yield put( { type: 'FETCH_LIST', payload: action.payload.store_id } );\n  } \n  catch (error) {\n    console.log('User put request failed', error);\n  }\n}\n\n// worker SAGA: will be fired on 'UPDATE_QUANTITY' actions\nfunction* updateQuantity(action) {\n  console.log('in updateQuantity', action.payload);\n  try {\n    // axios asynch call to update quantity on database\n    yield call(axios.put, '/api/list', action.payload);\n    // will need to make a call to update the list of items\n    yield put( { type: 'FETCH_ITEMS_FOR_LIST' } );\n  } \n  catch (error) {\n    console.log('Quantity put request failed', error);\n  }\n}\n\n// worker SAGA: will be fired on 'DELETE_LIST_ITEM' actions\nfunction* deleteListItem(action) {\n  try {\n    // console.log('before delete shopping list item', action.payload)\n    //axios call to remove selected item from shopping list\n    yield call(axios.delete, '/api/list', {params: {id: action.payload.id}});\n    // will need to make a call to update the list of items\n    // yield put( { type: 'FETCH_ITEMS_FOR_LIST' } );\n    // console.log('before fetch shopping list after delete', action.payload)\n    yield put( { type: 'FETCH_LIST' , payload: action.payload.store_id} );\n  }\n  catch (error) {\n    console.log('error with delete request to /api/list');\n    \n  } \n}\n\n// worker SAGA: will be fired on 'DELETE_LIST_ITEM' actions\nfunction* deleteItemFromList(action) {\n  try {\n    // console.log('before delete shopping list item', action.payload)\n    //axios call to remove selected item from shopping list\n    yield call(axios.delete, '/api/list', {params: {id: action.payload.id}});\n    // will need to make a call to update the list of items\n    // yield put( { type: 'FETCH_ITEMS_FOR_LIST' } );\n    // console.log('before fetch shopping list after delete', action.payload)\n    yield put( { type: 'FETCH_ITEMS_FOR_LIST', payload: action.payload.store_id} );\n  }\n  catch (error) {\n    console.log('error with delete request to /api/list');\n    \n  } \n}\n\n// worker SAGA: will be fired on 'ADD_ITEM_TO_LIST' actions\nfunction* addItemToList(action) {\n  try {\n      // axios asynch call to add item to shopping list on database\n      yield call(axios.post, '/api/list', action.payload);\n      // will need to make a call to update the list of items\n      yield put( { type: 'FETCH_ITEMS_FOR_LIST' } );\n  }\n  catch (error) {\n      console.log('error with add list post request');\n  }\n}\n\nfunction* listSaga() {\n  yield takeLatest('FETCH_LIST', fetchList);\n  yield takeLatest('CLEAR_LIST', clearList);\n  yield takeLatest('FOUND_ITEM', foundItem);\n  yield takeLatest('DELETE_LIST_ITEM', deleteListItem);\n  yield takeLatest('DELETE_ITEM_FROM_LIST', deleteItemFromList);\n  yield takeLatest('ADD_ITEM_TO_LIST', addItemToList);\n  yield takeLatest('UPDATE_QUANTITY', updateQuantity);\n}\n\nexport default listSaga;\n","import axios from 'axios';\nimport { put, call, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_STORES\" actions\nfunction* fetchStores(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n    // axios asynch call to retrieve the stores from the database\n    const response = yield axios.get('api/store', config);\n    // send response to the redux store\n    yield put({ type: 'SET_STORES', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\n// worker SAGA: will be fired on 'ADD_STORE' actions\nfunction* addStore(action) {\n  try {\n      // axios asynch call to add store on database\n      yield call(axios.post, '/api/store', action.payload);\n      // will need to make a call to update the list of stores\n      yield put( { type: 'FETCH_STORES' } );\n  }\n  catch (error) {\n      console.log('error with add list post request');\n  }\n}\n\n// worker SAGA: will be fired on 'DELETE_STORE' actions\nfunction* deleteStore(action) {\n  try {\n    //axios call to remove selected item from shopping list\n    yield call(axios.delete, '/api/store', {params: {id: action.payload}});\n    // will need to make a call to update the list of items\n    yield put( { type: 'FETCH_STORES' } );\n  }\n  catch (error) {\n    console.log('error with delete request to /api/store');\n  } \n}\n\nfunction* storeSaga() {\n  yield takeLatest('FETCH_STORES', fetchStores);\n  yield takeLatest('ADD_STORE', addStore);\n  yield takeLatest('DELETE_STORE', deleteStore);\n}\n\nexport default storeSaga;\n","import axios from 'axios';\nimport { put, call, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_STORE_CATEGORY\" actions\nfunction* fetchStoreCategory(action) {\n  try {\n    // axios asynch call to retrieve the stores from the database\n    console.log('before api call to store_category', action.payload);\n    const response = yield axios.get('api/store_category', {params: {id: action.payload}});\n    // send response to the redux store\n    yield put({ type: 'SET_STORE_CATEGORY', payload: response.data });\n\n  } catch (error) {\n    console.log('User get store categories request failed', error);\n  }\n}\n\n// worker Saga: will be fired on \"UPDATE_CATEGORY_ORDER\" actions\nfunction* updateCategoryOrder(action) {\n  let from=action.payload.oldIndex + 1;\n  let to=action.payload.newIndex + 1;\n  let store=action.payload.storeId;\n  console.log('in updateCategoryOrder,', from, to, store);\n  \n  try {\n    //axios call to update category ordering\n    console.log('in try of update');\n    yield call(axios.put, '/api/store_category/order1', {params: {old: from, new: to, store: store}});\n    yield call(axios.put, '/api/store_category/order2', {params: {old: from, new: to, store: store}});\n    yield call(axios.put, '/api/store_category/order3', {params: {old: from, new: to, store: store}});\n    // yield put( { type: 'SET_STORE_CATEGORY'} );\n  }\n  catch (error) {\n    console.log('error with update category order to /api/store_category');\n    \n  }\n}\n\n// worker SAGA: will be fired on 'ADD_STORE' actions\n// function* addStore(action) {\n//   try {\n//       // axios asynch call to add store on database\n//       yield call(axios.post, '/api/store', action.payload);\n//       // will need to make a call to update the list of stores\n//       yield put( { type: 'FETCH_STORES' } );\n//   }\n//   catch (error) {\n//       console.log('error with add list post request');\n//   }\n// }\n\n// // worker SAGA: will be fired on 'DELETE_STORE' actions\n// function* deleteStore(action) {\n//   try {\n//     //axios call to remove selected item from shopping list\n//     yield call(axios.delete, '/api/store', {params: {id: action.payload}});\n//     // will need to make a call to update the list of items\n//     yield put( { type: 'FETCH_STORES' } );\n//   }\n//   catch (error) {\n//     console.log('error with delete request to /api/store');\n//   } \n// }\n\nfunction* storeSaga() {\n  yield takeLatest('FETCH_STORE_CATEGORY',fetchStoreCategory);\n  yield takeLatest('UPDATE_CATEGORY_ORDER', updateCategoryOrder)\n  // yield takeLatest('ADD_STORE', addStore);\n  // yield takeLatest('DELETE_STORE', deleteStore);\n}\n\nexport default storeSaga;\n","import axios from 'axios';\nimport { put, call, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_CATEGORY\" actions\nfunction* fetchCategory(action) {\n  console.log('in fetch category Saga', action.payload);\n  \n  try {\n    const response = yield axios.get('api/category');\n    console.log('response from list:', response);\n    \n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_CATEGORY', payload: response.data });\n  } catch (error) {\n    console.log('Category get request failed', error);\n  }\n}\n\n// worker SAGA: will be fired on 'ADD_CATEGORY' actions\n// user entered a new category\nfunction* addCategory(action) {\n  try {\n      // axios asynch call to add category on database\n      yield call(axios.post, '/api/category', action.payload);\n      // will need to make a call to update the list of category\n      yield put( { type: 'FETCH_CATEGORY' } );\n  }\n  catch (error) {\n      console.log('error with add category post request');\n  }\n}\n\n// worker SAGA: will be fired on 'DELETE_CATEGORY' actions\nfunction* deleteCategory(action) {\n  try {\n    //axios call to remove selected category\n    yield call(axios.delete, '/api/category', {params: {id: action.payload}});\n    // will need to make a call to update the list of catgories\n    yield put( { type: 'FETCH_CATEGORY' } );\n  }\n  catch (error) {\n    console.log('error with delete request to /api/store');\n  } \n}\n\n// worker SAGA: will be fired on 'UPDATE_CATEGORY' actions\nfunction* updateCategory(action) {\n  console.log('in updateCategory saga', action.payload)\n  try {\n      // axios asynch call to add category on database\n      yield call(axios.put, '/api/category', action.payload);\n      // will need to make a call to update the list of category\n      yield put( { type: 'FETCH_CATEGORY' } );\n  }\n  catch (error) {\n      console.log('error with update category post request');\n  }\n}\n\n// worker SAGA: will be fired on 'ADD_CATEGORY_FOR_USER' actions\n// new user created .. add the default categories\n// function* addCategoryForUser(action) {\n//   try {\n//       // axios asynch call to add category on database\n//       yield call(axios.post, '/api/category/user', action.payload);\n//       // will need to make a call to update the list of category\n//       yield put( { type: 'FETCH_CATEGORY' } );\n//   }\n//   catch (error) {\n//       console.log('error with add category post request');\n//   }\n// }\n\nfunction* categorySaga() {\n  yield takeLatest('FETCH_CATEGORY', fetchCategory);\n  yield takeLatest('ADD_CATEGORY', addCategory);\n  yield takeLatest('DELETE_CATEGORY', deleteCategory);\n  yield takeLatest('UPDATE_CATEGORY', updateCategory);\n  // yield takeLatest('ADD_CATEGORY_FOR_USER', addCategoryForUser);\n}\n\nexport default categorySaga;\n","import axios from 'axios';\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\n// worker SAGA: will be fired on 'ADD_ITEM' actions\n// user entered a new item\nfunction* addItem(action) {\n  try {\n      // axios asynch call to add item on database\n      yield call(axios.post, '/api/item', action.payload);\n      // will need to make a call to update the list of item\n      yield put( { type: 'FETCH_ITEMS_FOR_LIST' } );\n  }\n  catch (error) {\n      console.log('error with add item post request');\n  }\n}\n\n// worker SAGA: will be fired on 'UPDATE_ITEM' actions\nfunction* updateItem(action) {\n  console.log('in updateItem saga', action.payload)\n  try {\n      // axios asynch call to add category on database\n      yield call(axios.put, '/api/item', action.payload);\n      // will need to make a call to update the list of category\n      yield put( { type: 'FETCH_ITEMS_FOR_LIST' } );\n  }\n  catch (error) {\n      console.log('error with update category post request');\n  }\n}\n\n// worker Saga: will be fired on \"FETCH_ITEMS\" actions\nfunction* fetchItems(action) {\n  try {\n    const response = yield axios.get('api/item');\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_ITEMS', payload: response.data });\n  } catch (error) {\n    console.log('Item get request failed', error);\n  }\n}\n\n// worker Saga: will be fired on \"FETCH_ITEMS_FOR_LIST\" actions\nfunction* fetchItemsForList(action) {\n  try {\n    // axios asynch call to retrieve items from the database\n    const response = yield axios.get('api/item/list', {params: {id: action.payload}});    \n    // call to move those into the redux state\n    yield put({ type: 'SET_ITEMS_FOR_LIST', payload: response.data });\n  } catch (error) {\n    console.log('Items get request failed', error);\n  }\n}\n\n// worker SAGA: will be fired on 'DELETE_ITEM' actions\nfunction* deleteItem(action) {\n  try {\n    //axios call to remove selected category\n    yield call(axios.delete, '/api/item', {params: {id: action.payload}});\n    // will need to make a call to update the list of catgories\n    yield put( { type: 'FETCH_ITEMS_FOR_LIST' } );\n  }\n  catch (error) {\n    console.log('error with delete request to /api/item');\n  } \n}\n\nfunction* itemSaga() {\n  yield takeLatest('FETCH_ITEMS_FOR_LIST', fetchItemsForList);\n  yield takeLatest('ADD_ITEM', addItem);\n  yield takeLatest('FETCH_ITEMS', fetchItems);\n  yield takeLatest('DELETE_ITEM', deleteItem);\n  yield takeLatest('UPDATE_ITEM', updateItem);\n}\n\nexport default itemSaga;\n","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport listSaga from './listSaga';\nimport storeSaga from './storeSaga';\nimport storeCategorySaga from './storeCategorySaga';\nimport categorySaga from './categorySaga';\nimport itemSaga from './itemSaga';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    listSaga(),\n    storeSaga(),\n    storeCategorySaga(),\n    categorySaga(),\n    itemSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/home\">\n      <h2 className=\"nav-title\">listORDR</h2>\n    </Link>\n    <div className=\"nav-right\">\n      <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'List' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? `Let's Shop!` : 'Login / Register'}\n      </Link>\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/create\">\n            Create List\n          </Link>\n          <Link className=\"nav-link\" to=\"/stores\">\n            Stores\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      <Link className=\"nav-link\" to=\"/about\">\n        About\n      </Link>\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; Rhonda Stark\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\n\n// const Title = styled.h1`\n//   text-transform: uppercase;  \n//   text-align: center;\n// `;\n\nconst Wrapper = styled.section`\n  text-align: center;\n`;\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  \n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <form onSubmit={this.login}>\n          <Typography variant=\"h4\">Login</Typography>\n          <div>\n          <TextField\n          name=\"username\"\n          id=\"outlined-name\"\n          placeholder=\"User Name\"\n          value={this.state.username}\n          margin=\"normal\"\n          variant=\"outlined\"\n          onChange={this.handleInputChangeFor('username')}\n          />\n          </div>\n          <div>\n            <TextField\n              name=\"password\"\n              id=\"outlined-password\"\n              placeholder=\"Password\"\n              value={this.state.password}\n              type=\"password\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              onChange={this.handleInputChangeFor('password')}\n            />\n          </div>\n          <div>\n            <input\n              className=\"log-in\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Log In\"\n            />\n          </div>\n        </form>\n        <center>\n          <Button\n            type=\"button\"\n            // variant=\"contained\"\n            color=\"primary\"\n            // className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_REGISTER_MODE'})}}\n          >\n            Register\n          </Button>\n        </center>\n      </Wrapper>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n// const Title = styled.h1`\n//   text-transform: uppercase;  \n//   text-align: center;\n// `;\n\nconst Wrapper = styled.section`\n  text-align: center;\n`;\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({type: 'REGISTRATION_INPUT_ERROR'});\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        {this.props.errors.registrationMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.registrationMessage}\n          </h2>\n        )}\n        <form onSubmit={this.registerUser}>\n          <Typography variant=\"h4\">Register User</Typography>\n          <div>\n          <TextField\n          name=\"username\"\n          id=\"outlined-name\"\n          placeholder=\"User Name\"\n          value={this.state.username}\n          margin=\"normal\"\n          variant=\"outlined\"\n          onChange={this.handleInputChangeFor('username')}\n          />\n          </div>\n          <div>\n            <TextField\n              name=\"password\"\n              id=\"outlined-password\"\n              placeholder=\"Password\"\n              value={this.state.password}\n              type=\"password\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              onChange={this.handleInputChangeFor('password')}\n            />\n          </div>\n\n          <div>\n            <input\n              className=\"register\"\n              type=\"submit\"\n              name=\"submit\"\n              value=\"Register\"\n            />\n          </div>\n        </form>\n        <center>\n          <Button\n            type=\"button\"\n            className=\"link-button\"\n            onClick={() => {this.props.dispatch({type: 'SET_TO_LOGIN_MODE'})}}\n          >\n            Login\n          </Button>\n        </center>\n      </Wrapper>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(RegisterPage);\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n    list: state.list,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nconst Wrapper = styled.section`\n  text-align: center;\n`;\n\nclass AboutPage extends Component {\n\n  render() {\n    return (\n      <Wrapper>\n          <Typography variant=\"h4\">Technologies Used</Typography>\n          <List>\n            <ListItem key='1' divider={true} dense={true}>\n              <ListItemText>\n                  JavaScript\n              </ListItemText>\n            </ListItem>\n            <ListItem key='2' divider={true} dense={true}>\n              <ListItemText>\n                  React\n              </ListItemText>\n            </ListItem>\n            <ListItem key='3' divider={true} dense={true}>\n              <ListItemText>\n                  Node\n              </ListItemText>\n            </ListItem>\n            <ListItem key='4' divider={true} dense={true}>\n              <ListItemText>\n                  PostgreSQL\n              </ListItemText>\n            </ListItem>\n            <ListItem key='5' divider={true} dense={true}>\n              <ListItemText>\n                  Material UI\n              </ListItemText>\n            </ListItem>\n            <ListItem key='6' divider={true} dense={true}>\n              <ListItemText>\n                  React Sortable HOC\n              </ListItemText>\n            </ListItem>\n          </List>\n      </Wrapper>\n    )}\n}\n\n// this allows us to use <App /> in index.js\nexport default (AboutPage);\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst InfoPage = () => (\n  <div>\n    <p>\n      Info Page\n    </p>\n  </div>\n);\n\nexport default InfoPage;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport Cancel from'@material-ui/icons/Cancel';\nimport IconButton from '@material-ui/core/IconButton';\nimport { isNull } from 'util';\nimport Typography from '@material-ui/core/Typography';\n\nclass ShoppingListItem extends Component {\n\n  // will need to update the found flag \n  // in the database and then refresh the list\n  handleToggle = item => () => {\n      this.props.dispatch({ type: 'FOUND_ITEM', payload: {item: item, store_id: this.props.store_id}})\n  };\n\n  render() {\n    let item = this.props.item;\n    let itemText = '';\n    itemText = `${item.quantity} - ${item.item}`;\n    if (item.found) {\n      itemText = <Typography variant='body1' style={{ textDecoration: 'line-through' }}>{itemText}\n        {isNull(item.brand_name) ? '' : <Chip color=\"primary\" label={item.brand_name} />}</Typography>;\n    } else {\n      itemText = <Typography variant='body1'>{itemText} {isNull(item.brand_name) ? '' : \n        <Chip color=\"primary\" label={item.brand_name} />}</Typography>;\n    }\n\n    return (\n      <ListItem key={item.id} divider={true} \n                role={undefined} button onClick={this.handleToggle(item)}>\n            <ListItemText>\n            {itemText}\n          </ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton onClick={this.props.handleRemoveClick(item.id)} \n              aria-label=\"Remove\">\n              <Cancel />\n            </IconButton>\n            <Checkbox\n              checked={item.found}\n              tabIndex={-1}\n              disableRipple\n            />\n          </ListItemSecondaryAction>\n      </ListItem>\n    )}\n}\n\n// Instead of taking everything from state, we just want the list info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  list: state.list,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(ShoppingListItem);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\n\nclass StoreSelector extends Component {\n\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_STORES'})\n  }\n\n  renderStoreOptions() {\n    return this.props.store.map((Store, index) => {\n      return (\n        <MenuItem\n          key={index}\n          value={Store.id}>\n          {Store.name} : {Store.location}\n        </MenuItem>\n      ); // end return\n    }); // end map\n  } // end renderStoreOptions\n\n  render(){\n    return (\n      <FormControl fullWidth={true}>\n        <Select fullWidth={true}\n          value={this.props.store_id}\n          // displayEmpty\n          // variant=\"filled\"\n          // placeholder=\"Select Store\"\n          name=\"store_id\"\n          onChange={this.props.handleChange}\n          // input={\n          //   <OutlinedInput\n          //     labelwidth=\"300\"\n          //     name=\"age\"\n          //   />\n          // }\n        >\n        <MenuItem\n          key='1a'\n          value='0'>\n          Select your Store\n        </MenuItem>\n\n          {this.renderStoreOptions()}\n        </Select>\n      </FormControl>\n    )\n  } // end return\n} // end class StoreSelector\n\n// const mapReduxStateToProps = (reduxState) => ({\n//   reduxState\n// });\n\nconst mapStateToProps = state => ({\n  store: state.store,\n});\n\nexport default connect(mapStateToProps)(StoreSelector);","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\nimport ClearButton from '@material-ui/icons/Clear';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nclass ClearListButton extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleCloseClear = () => {\n    this.setState({ open: false });\n    this.props.handleClearList();\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    return (\n      <div>\n        <Fab color=\"primary\" onClick={this.handleClickOpen} \n          aria-label=\"Clear\" fontSize=\"large\">\n          <ClearButton  />\n        </Fab>\n \n        {/* <Button onClick={this.handleClickOpen}>Open alert dialog</Button> */}\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">Clear the List</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Are you sure you want to clear the list?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              No\n            </Button>\n            <Button onClick={this.handleCloseClear} color=\"primary\" autoFocus>\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default ClearListButton;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport List from '@material-ui/core/List';\nimport styled from 'styled-components';\nimport ShoppingListItem from './ShoppingListItem';\nimport StoreSelector from './StoreSelector';\nimport ClearButton from './ClearButton';\nimport Typography from '@material-ui/core/Typography';\n\nconst Wrapper = styled.section`\n  text-align: center;\n  // padding: 4em;\n  // margin-left: 25%;\n  // margin-right: 25%;\n`;\n\nclass ShoppingList extends Component {\n\n  state = {id: 0};\n\n  handleChange = (event) => {\n    this.setState({id: event.target.value});\n    this.props.dispatch({type: 'FETCH_LIST', payload: event.target.value});\n  };\n\n  handleClearList = (event) => {\n    this.props.dispatch({type: 'CLEAR_LIST', payload: {store_id: this.state.id}});\n  };\n\n  handleRemoveClick = item => () => {\n    this.props.dispatch({ type: 'DELETE_LIST_ITEM', payload: {id: item, store_id: this.state.id}});\n  };\n\n  componentDidMount () {\n    this.getListForStore();\n  }\n\n  getListForStore = () => {\n    this.props.dispatch({type: 'FETCH_LIST', payload: this.state.id})\n  }\n\n  render() {\n    return (\n      <Wrapper>\n          <Typography variant=\"h4\">Let's Shop!</Typography>\n          <div>\n            <StoreSelector store_id={this.state.id} \n              handleChange={this.handleChange}/>\n          </div>\n          <List>\n            {this.props.list.map(item => (\n              <ShoppingListItem key={item.id} item={item} store_id={this.state.id}\n                  handleRemoveClick={this.handleRemoveClick} />\n            ))}\n          </List>\n          <div>\n            <ClearButton handleClearList={this.handleClearList}/>\n          </div>\n      </Wrapper>\n    )}\n}\n\n// Instead of taking everything from state, we just want the list info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  list: state.list,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(ShoppingList);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleButton from '@material-ui/icons/AddCircle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    contentAlign: 'center'\n  },\n  textField: {\n    marginLeft: 100,\n    marginRight: 10,\n    width: 200,\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nconst emptyListItem = {\n  id: 0,\n  name: '',\n  brand_name: '',\n  category_id: 0,\n  person_id: 0,\n}\n\nclass ItemForm extends Component {\n\n  state = {\n    open: false,\n    newItem: emptyListItem,\n  };\n\n  componentDidMount ()\n  {\n    this.setState({\n      ...this.state,\n      newItem: {\n        id: this.props.item_id,\n        name: this.props.item_name,\n        brand_name: this.props.brand_name,\n        category_id: this.props.category_id,\n        person_id: 0,\n      }\n    });\n  }\n\n  // update state from inputs\n  handleChange = event => {\n      this.setState({\n        ...this.state,\n        newItem: {\n            ...this.state.newItem,\n            [event.target.name]: event.target.value,\n            category_id: this.props.category_id,\n        }\n      });\n  };\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  // verify that name has been filled out\n  validItemData = () => {\n    let check = this.state.newItem;\n    if (check.name === '') {\n      alert('Please enter an item name.');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // add a new category only if valid name\n  addNewItem = event => {\n      event.preventDefault();\n      if (this.validItemData()) {\n        this.props.dispatch({ type: 'ADD_ITEM', payload: this.state.newItem });\n        this.setState({\n          open: false,\n          newItem: emptyListItem\n        });\n      }\n  }\n\n  // update category name\n  updateItem = event => {\n    event.preventDefault();\n    console.log('in update item:', this.state.newItem);\n    if (this.validItemData()) {\n      this.props.dispatch({ type: 'UPDATE_ITEM', payload: this.state.newItem });\n      this.setState({\n        open: false,\n        newItem: emptyListItem\n      });\n    }\n  } \n\n  render() {\n    return (\n      <Fragment>\n        {\n        this.props.status ?\n        (<Tooltip title=\"New Item\" placement=\"top\" aria-label=\"New Item\">\n          <IconButton color=\"primary\" onClick={this.handleClickOpen} \n            aria-label=\"Add\">\n            <AddCircleButton/>\n          </IconButton>\n        </Tooltip>)\n        :\n        (<Tooltip title=\"Update Item\" placement=\"top\" aria-label=\"Update Item\">\n        <IconButton color=\"primary\" onClick={this.handleClickOpen} \n          aria-label=\"Update\">\n          <EditIcon/>\n        </IconButton>\n      </Tooltip>)\n      }\n\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          {\n          this.props.status ? \n          (\n            <DialogTitle id=\"form-dialog-title\">New Item for {this.props.category_name}</DialogTitle>\n          ) :\n          (\n            <DialogTitle id=\"form-dialog-title\">Update Item</DialogTitle>\n          ) \n          }\n          {/* <DialogTitle id=\"form-dialog-title\">New Item for {this.props.category_name}</DialogTitle> */}\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              name=\"name\"\n              placeholder=\"Item Name\"\n              // label=\"Category\"\n              value={this.state.newItem.name}\n              fullWidth\n              onChange={this.handleChange}\n            />\n            <TextField\n              margin=\"dense\"\n              name=\"brand_name\"\n              // label=\"Category\"\n              placeholder=\"Brand Name\"\n              value={this.state.newItem.brand_name}\n              fullWidth\n              onChange={this.handleChange}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            {\n              this.props.status ? \n                (<Button onClick={this.addNewItem} color=\"primary\">\n                  Add\n                </Button>)\n              : \n                (<Button onClick={this.updateItem} color=\"primary\">\n                  Update\n              </Button>)\n            }\n            {/* <Button onClick={this.addNewItem} color=\"primary\">\n              Add Item\n            </Button> */}\n          </DialogActions>\n        </Dialog>\n      </Fragment>\n    ); // end return\n  } // end render\n} // end AdminForm class\n\nconst mapStateToProps = state => ({\n  item: state.item,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(ItemForm));","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteForever from '@material-ui/icons/DeleteForever';\nimport RemoveCircle from '@material-ui/icons/RemoveCircle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport { withStyles } from '@material-ui/core/styles';\nimport { confirmAlert } from 'react-confirm-alert';\nimport ItemForm from './ItemForm';\nimport '../../../node_modules/react-confirm-alert/src/react-confirm-alert.css'\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n  },\n  ExpansionPanelDetails: {\n    padding: 0,\n  }\n});\n\nconst emptyListItem = {\n  item_id: 0,\n  quantity: 0,\n  person_id: 0\n};\n\nclass ItemForCategory extends Component {\n  \n  state = { newListItem: emptyListItem };\n\n  handleItemClick = itemForCat => () => {\n    if (itemForCat.quantity === null) {\n      itemForCat.quantity = 1;\n      this.props.dispatch({ type: 'ADD_ITEM_TO_LIST', payload: itemForCat});\n    } else {\n      itemForCat.quantity += 1;\n      this.props.dispatch({ type: 'UPDATE_QUANTITY', payload: itemForCat})\n    }\n  };\n\n  handleRemoveClick = item => () => {\n    if (item != null) {\n      this.props.dispatch({ type: 'DELETE_ITEM_FROM_LIST', payload: {id: item, store_id: 0}});\n    }\n  };\n\n  // handle Delete click\n  handleDeleteClick = id => () => {\n    // confirm the deletion \n    console.log('in delete click', id)\n    confirmAlert({\n      title: 'Confirm to delete',\n      message: 'Are you sure you want to delete this item?',\n      buttons: [\n        {\n          label: 'Delete',\n          onClick: () => {\n            this.props.dispatch({ type: 'DELETE_ITEM', payload: id});\n          }\n        },\n        {\n          label: 'Cancel',\n          onClick: () => console.log('cancelled delete do nothing.')\n        }\n      ]\n    })// end confirmAlert\n  }; // end handleClick\n\n  render() {\n\n    let itemOnList = true;\n    if (this.props.itemForCat.quantity === null) {\n      itemOnList = false;\n    }\n    \n    return (\n      <ListItem key={this.props.itemForCat.item_id} divider={true} dense={true}\n          button onClick={this.handleItemClick(this.props.itemForCat)} >\n          <Checkbox\n              checked={itemOnList}\n              tabIndex={-1}\n              disableRipple\n            />\n        <Badge color=\"primary\" badgeContent={this.props.itemForCat.quantity} invisible={!itemOnList} >              \n          <ListItemText\n              primary={this.props.itemForCat.item} secondary={this.props.itemForCat.brand_name}\n          />\n          </Badge>\n        <ListItemSecondaryAction>\n            <ItemForm status={false} category_name={this.props.itemForCat.name} \n              item_id={this.props.itemForCat.item_id} item_name={this.props.itemForCat.item}\n              brand_name={this.props.itemForCat.brand_name} category_id = {this.props.itemForCat.id}/>\n            <IconButton color='primary' onClick={this.handleDeleteClick(this.props.itemForCat.item_id)} \n              aria-label=\"Delete\">\n              <DeleteForever />\n            </IconButton>\n            <IconButton color='primary' onClick={this.handleRemoveClick(this.props.itemForCat.list_id)} \n              aria-label=\"Remove\">\n              <RemoveCircle />\n            </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n    )}\n}\n\n// Instead of taking everything from state, we just want the item info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  item: state.item,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(withStyles(styles)(ItemForCategory));\n// ","import React, {Component} from 'react';\nimport ItemForCategory from './ItemForCategory';\nimport List from '@material-ui/core/List';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\n\nclass ItemListForCategory extends Component {\n\n  render() {\n    return (\n      <ExpansionPanelDetails>\n        <List>\n            {this.props.itemsForCategory.map(itemForCat => (\n              <ItemForCategory key={itemForCat.item_id} itemForCat={itemForCat} />\n            ))}\n        </List>\n      </ExpansionPanelDetails>\n    )}\n}\n\nexport default (ItemListForCategory);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleButton from '@material-ui/icons/AddCircle';\nimport EditButton from '@material-ui/icons/Edit';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    contentAlign: 'center'\n  },\n  textField: {\n    marginLeft: 100,\n    marginRight: 10,\n    width: 200,\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nconst emptyCategoryObject = {\n  name: '',\n  id: 0,\n}\n\nclass CategoryForm extends Component {\n\n  state = {\n    open: false,\n    newCategory: {\n      name: '',\n      id: 0,\n    }\n  }\n\n  componentDidMount ()\n  {\n    this.setState({\n      ...this.state,\n      newCategory: {\n        name: this.props.category_name,\n        id: this.props.category_id,\n      }\n    });\n  }\n\n  // update state from inputs\n  handleChange = event => {\n      this.setState({\n        ...this.state,\n        newCategory: {\n            ...this.state.newCategory,\n            [event.target.name]: event.target.value,\n        }\n      });\n  };\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  // verify that name has been filled out\n  validCategoryData = () => {\n    let check = this.state.newCategory;\n    if (check.name === '') {\n      alert('Please enter a category name.');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // add a new category only if valid name\n  addNewCategory = event => {\n      event.preventDefault();\n      if (this.validCategoryData()) {\n        this.props.dispatch({ type: 'ADD_CATEGORY', payload: this.state.newCategory });\n        this.setState({\n          open: false,\n          newCategory: emptyCategoryObject\n        });\n      }\n  }\n\n  // update category name\n  updateCategory = event => {\n    event.preventDefault();\n    console.log('in update category');\n    if (this.validCategoryData()) {\n      this.props.dispatch({ type: 'UPDATE_CATEGORY', payload: this.state.newCategory });\n      this.setState({\n        open: false,\n        newCategory: emptyCategoryObject\n      });\n    }\n  }  \n\n  render() {\n    return (\n      <div>\n      {\n        this.props.status ?\n        (<Tooltip title=\"New Category\" placement=\"right\" aria-label=\"New Category\">\n          <IconButton color=\"primary\" onClick={this.handleClickOpen} \n            aria-label=\"Add\">\n            <AddCircleButton fontSize=\"large\"/>\n          </IconButton>\n        </Tooltip>)\n        :\n        (<Tooltip title=\"Update Category\" placement=\"top\" aria-label=\"Update Category\">\n        <IconButton color=\"primary\" onClick={this.handleClickOpen} \n          aria-label=\"Update\">\n          <EditButton/>\n        </IconButton>\n      </Tooltip>)\n      }\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">{this.props.title} Category</DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              name=\"name\"\n              // label=\"Category\"\n              value={this.state.newCategory.name}\n              fullWidth\n              onChange={this.handleChange}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            {\n              this.props.status ? \n                (<Button onClick={this.addNewCategory} color=\"primary\">\n                  Add\n                </Button>)\n              : \n                (<Button onClick={this.updateCategory} color=\"primary\">\n                  Update\n              </Button>)\n            }\n          </DialogActions>\n        </Dialog>\n      </div>\n    ); // end return\n  } // end render\n} // end AdminForm class\n\nconst mapStateToProps = state => ({\n  category: state.category,\n});\n\nexport default connect(mapStateToProps) (withStyles(styles)(CategoryForm));","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport ItemListForCategory from './ItemListForCategory';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ItemForm from './ItemForm';\nimport CategoryForm from './CategoryForm';\nimport { confirmAlert } from 'react-confirm-alert';\nimport '../../../node_modules/react-confirm-alert/src/react-confirm-alert.css'\n\nclass CategoryList extends Component {\n\n  state = {\n    expanded: null,\n  }\n\n  handleChange = panel => (event, expanded) => {\n    console.log('in expansion', panel, expanded);\n    this.setState({\n      expanded: expanded ? panel : false,\n    });\n  };\n\n  // handle Delete click\n  handleDeleteClick = id => () => {\n    // confirm the deletion \n    confirmAlert({\n      title: 'Confirm to delete',\n      message: 'Are you sure? This is permanent and will remove all items in the category.',\n      buttons: [\n        {\n          label: 'Delete',\n          onClick: () => this.props.dispatch({ type: 'DELETE_CATEGORY', payload: id})\n        },\n        {\n          label: 'Cancel',\n          onClick: () => console.log('cancelled delete do nothing.')\n        }\n      ]\n    })// end confirmAlert\n  }; // end handleClick\n  \n  render() {\n    const { expanded } = this.state;\n    \n    // Filter the items for the current category\n    const listForCat = this.props.item.filter(cat => cat.category_id === this.props.category.id);\n    \n    return (\n      <ExpansionPanel key={this.props.category.id} expanded={expanded === this.props.category.id}\n        onChange={this.handleChange(this.props.category.id)}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant='body1'>{this.props.category.name}</Typography>\n          </ExpansionPanelSummary>\n          {\n            (listForCat.length !== 0) ? \n            <ItemListForCategory itemsForCategory={listForCat} /> \n            : ''\n          }\n          <ExpansionPanelActions>\n            <ItemForm status={true} category_name={this.props.category.name} category_id={this.props.category.id}/>\n            <CategoryForm status={false} title='Update' category_name={this.props.category.name} category_id = {this.props.category.id}/>\n            <Tooltip title=\"Delete Category\" placement=\"top\" aria-label=\"Delete Category\">\n              <IconButton onClick={this.handleDeleteClick(this.props.category.id)} color=\"primary\" aria-label=\"Delete\">\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n        </ExpansionPanelActions>\n      </ExpansionPanel>\n    )}\n}\n\n// Instead of taking everything from state, we just want the item info.\nconst mapStateToProps = state => ({\n  item: state.item,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(CategoryList);\n// ","import React, {Component, Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport CategoryList from './CategoryList';\nimport Typography from '@material-ui/core/Typography';\nimport CategoryForm from './CategoryForm';\n\nclass CreateListPage extends Component {\n\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_CATEGORY'});\n    this.props.dispatch({type: 'FETCH_ITEMS_FOR_LIST'});\n  }\n\n  render() {\n    return (\n      <div>\n          <Typography variant=\"h4\">Create List</Typography>\n          <CategoryForm status={true} title='New' category_name='' category_id = {0} />\n          {this.props.category.map(cat => (\n            <CategoryList key={cat.id} category={cat}/>\n          ))}\n      </div>\n    )}\n}\n\n// Instead of taking everything from state, we just want the list info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  item: state.item,\n  category: state.category,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(CreateListPage);\n// ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddCircleButton from '@material-ui/icons/AddCircle';\nimport styled from 'styled-components';\n\n// const styles = theme => ({\n//   container: {\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//   },\n//   textField: {\n//     marginLeft: 100,\n//     marginRight: 10,\n//     width: 200,\n//   },\n//   dense: {\n//     marginTop: 19,\n//   },\n//   menu: {\n//     width: 200,\n//   },\n// });\n\nconst Wrapper = styled.section`\n  // padding: 2em;\n  text-align: center;\n`;\n\nconst Title = styled.h3`\n  text-align: center;\n`;\n\nconst emptyStoreObject = {\n  name: '',\n  location: '',\n  person_id: 0,\n}\n\nclass StoreAdminForm extends Component {\n\n  state = {newStore: emptyStoreObject};\n\n  // update state from inputs\n  handleChange = event => {\n      // console.log('event happened', event, this.state);\n      this.setState({\n        newStore: {\n            ...this.state.newStore,\n            [event.target.name]: event.target.value,\n        }\n      });\n  }\n\n  // verify that name has been filled out\n  validStoreData = () => {\n    let check = this.state.newStore;\n    if (check.name === '') {\n      alert('Please enter a store name.');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // add a new store only if valid name\n  addNewStore = event => {\n      event.preventDefault();\n      if (this.validStoreData()) {\n        // console.log('store data', this.state.newStore);\n        \n        this.props.dispatch({ type: 'ADD_STORE', payload: this.state.newStore });\n        this.setState({\n            newStore: emptyStoreObject\n        });\n      }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        {/* <Title>Add Store</Title> */}\n        <TextField\n          name=\"name\"\n          id=\"outlined-name\"\n          placeholder=\"Store Name\"\n          value={this.state.newStore.name}\n          margin=\"normal\"\n          variant=\"outlined\"\n          onChange={this.handleChange}\n        />\n        <TextField\n          name=\"location\"\n          id=\"outlined-location\"\n          placeholder=\"Store Location\"\n          value={this.state.newStore.location}\n          margin=\"normal\"\n          variant=\"outlined\"\n          onChange={this.handleChange}\n        />\n        <div>\n          <IconButton color=\"primary\" onClick={this.addNewStore} \n              aria-label=\"Add\">\n              <AddCircleButton fontSize=\"large\"/>\n            </IconButton>\n        </div>\n      </Wrapper>\n    ); // end return\n  } // end render\n} // end AdminForm class\n\nconst mapStateToProps = state => ({\n  store: state.store,\n});\n\nexport default connect(mapStateToProps) (StoreAdminForm);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\n// import List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nconst SortableItem = SortableElement(({value}) =>\n  <ListItem divider={true}>{value.name}</ListItem>\n);\n\nconst SortableList = SortableContainer(({items}) => {\n    return (\n        <div>\n        {items.map((value, index) => (\n          <SortableItem key={`item-${index}`} index={index} value={value} />\n        ))}\n      </div>\n    );\n  });\n\n\nclass StoreCategoryList extends Component {\n\n    componentDidMount () {\n        this.props.dispatch({type: 'FETCH_STORE_CATEGORY', payload: this.props.store_id});\n    }\n\n    onSortEnd = ({oldIndex, newIndex}) => {\n        let storeId = this.props.store_id;\n        // call to saga to reorder the list in redux\n        this.props.dispatch({ type: 'REORDER_LIST', payload: {oldIndex, newIndex}});\n        // call to saga to update the list in the database\n        this.props.dispatch({ type: 'UPDATE_CATEGORY_ORDER', payload: {oldIndex, newIndex, storeId}});\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <SortableList helperClass='sortableHelper' items={this.props.storeCategory} \n                                    onSortEnd={this.onSortEnd}/>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    storeCategory: state.storeCategory\n});\n\nexport default connect(mapStateToProps)(StoreCategoryList);\n","import React, { Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ReorderIcon from '@material-ui/icons/Reorder';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport withMobileDialog from '@material-ui/core/withMobileDialog';\nimport StoreCategoryList from './StoreCategoryList';\n\nclass StoreCategoryOrder extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleClickOpen = () => {\n    console.log('in open dialog', this.props.store)\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { fullScreen } = this.props;\n\n    return (\n      // <div>\n        <Fragment>\n        <IconButton onClick={this.handleClickOpen} \n              aria-label=\"Reorder\">\n              <ReorderIcon />\n        </IconButton>\n        <Dialog\n          fullScreen={fullScreen}\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"dialog-reorder-store\"\n        >\n          <DialogTitle id=\"dialog-reorder-store\">Reorder Categories for {this.props.store.name}</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <StoreCategoryList store_id={this.props.store.id}/>\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Done\n            </Button>\n          </DialogActions>\n        </Dialog>\n      {/* </div> */}\n      </Fragment>\n    );\n  }\n}\n\nexport default withMobileDialog()(StoreCategoryOrder);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { confirmAlert } from 'react-confirm-alert';\nimport '../../../node_modules/react-confirm-alert/src/react-confirm-alert.css'\nimport StoreCategoryOrder from './StoreCategoryOrder';\n\nclass StoreList extends Component {\n\n  handleItemClick = id => () => {\n    console.log('select store for ordering', id);\n    // <StoreCategoryOrder />\n  };\n\n  // handle Delete click\n  handleDeleteClick = id => () => {\n    // confirm the deletion \n    console.log('in delete click', id)\n    confirmAlert({\n      title: 'Confirm to delete',\n      message: 'Are you sure? This is permanent.',\n      buttons: [\n        {\n          label: 'Delete',\n          onClick: () => this.props.dispatch({ type: 'DELETE_STORE', payload: id})\n        },\n        {\n          label: 'Cancel',\n          onClick: () => console.log('cancelled delete do nothing.')\n        }\n      ]\n    })// end confirmAlert\n  }; // end handleClick\n\n  render() {\n \n    return (\n\n      <List>\n      {this.props.store.map(store => (\n          <ListItem key={store.id} divider={true} dense={false}\n            button onClick={this.handleItemClick(store.id)}>\n          <ListItemText>\n              {store.name} : {store.location}\n          </ListItemText>\n        <ListItemSecondaryAction>\n            <StoreCategoryOrder store={store} />\n            <IconButton onClick={this.handleDeleteClick(store.id)} \n              aria-label=\"Delete\">\n              <DeleteIcon />\n            </IconButton>\n        </ListItemSecondaryAction>\n       </ListItem>\n        ))}\n      </List>\n    );\n  } // end render\n} // end StoreList class\n\nconst mapStateToProps = state => ({\n  store: state.store,\n});\n\nexport default connect(mapStateToProps)(StoreList);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport StoreAdminForm from './StoreAdminForm';\nimport StoreList from './StoreList';\n\nclass StoreAdminPage extends Component {\n\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_STORES'})\n  }\n\n  render() {\n\n    return (\n      <div>\n          {/* <StoreAdminForm /> */}\n          <StoreList />\n      </div>\n    )}\n}\n\n// Instead of taking everything from state, we just want the store info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  store: state.store,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(StoreAdminPage);\n","import React, {Component} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\n\nimport Nav from '../Nav/Nav';\n// import ButtonAppBar from '../Nav/AppBar';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport AboutPage from '../AboutPage/AboutPage';\nimport InfoPage from '../InfoPage/InfoPage';\nimport ShoppingList from '../ShoppingList/ShoppingList';\nimport CreateListPage from '../CreateListPage/CreateListPage';\n// import StoreAdminPage from '../StoreAdminPage/StoreAdminPage';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport './App.css';\nimport { Typography } from '@material-ui/core';\nimport 'typeface-roboto';\nimport 'typeface-open-sans';\nimport StoreAdminPage from '../StoreAdminPage/StoreAdminPage';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#008391',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#b0bec5',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n\n  typography: {\n    useNextVariants: true,\n    fontSize: 18,\n    fontFamily: 'Open Sans',\n  },\n});\n\nclass App extends Component {\n  componentDidMount () {\n    this.props.dispatch({type: 'FETCH_USER'})\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n      {/* <Typography> */}\n      <Router>\n        <div>\n          <Nav />\n          {/* <ButtonAppBar /> */}\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={ShoppingList}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            {/* <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={ShoppingList}\n            /> */}\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/create\"\n              component={CreateListPage}\n            />\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/stores\"\n              component={StoreAdminPage}\n            />\n\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n      {/* </Typography> */}\n      </MuiThemeProvider>\n  )}\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}